name: Production Release Workflow

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

jobs:
  tag-and-deploy:
    name: Create Tag, Release and Push Production Docker image to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      attestations: write
      id-token: write
      security-events: write
      actions: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # Setup Maven & compile App
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      working-directory: ./WebGoat
      run: ./mvnw clean install

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Extract version from branch name
    - name: Extract version from branch name
      id: extract_version
      run: echo "VERSION=${GITHUB_HEAD_REF#release/}" >> $GITHUB_ENV

    # Build and publish docker container
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      with:
        context: ./WebGoat
        file: ./WebGoat/Dockerfile
        push: true
        tags: |
          ${{ vars.DOCKER_NAMESPACE }}/${{ vars.DOCKER_REPOSITORY }}:${{ env.VERSION }}
          ${{ vars.DOCKER_NAMESPACE }}/${{ vars.DOCKER_REPOSITORY }}:latest
        labels: ${{ steps.meta.outputs.labels }}

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: docker.io/${{ vars.DOCKER_NAMESPACE }}/${{ vars.DOCKER_REPOSITORY}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true

    # Run Trivy vulnerability scanner
    - name: Run Trivy vulnerability scanner
      id: trivy-scan
      uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
      with:
        image-ref: ${{ vars.DOCKER_NAMESPACE }}/${{ vars.DOCKER_REPOSITORY }}:${{ env.VERSION }}
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL'
        timeout: '15m'
        skip-files: '**/*.jar'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    # Create Git Tag
    - name: Create Git Tag
      if: steps.trivy-scan.outcome == 'success'
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "actions@github.com"
        git tag -a "v${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
        git push origin "v${{ env.VERSION }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Create release
    - name: Create Release
      id: create_release
      if: steps.trivy-scan.outcome == 'success'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: v${{ env.VERSION }}
        draft: false
        prerelease: false

    # Update the application on the deployment server
    - name: Run Ansible Playbook
      if: steps.trivy-scan.outcome == 'success'
      uses: dawidd6/action-ansible-playbook@v2.8.0
      with:
        playbook: deploy_webgoat.yml

        directory: ./ansible

        # Inventory file content
        inventory: |
          [webgoat_host]
          ${{ vars.DEPLOYMENT_SERVER }} ansible_ssh_user=${{ vars.ANSIBLE_SSH_USER }} ansible_ssh_pass=${{ secrets.ANSIBLE_SSH_PASSWORD }}